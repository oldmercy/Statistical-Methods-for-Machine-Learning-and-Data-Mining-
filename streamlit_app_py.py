# -*- coding: utf-8 -*-
"""streamlit_app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mUChgs1M5m7MB6cyPHCudmaUjICmzgTZ
"""

# streamlit_app.py
import streamlit as st
import torch
import numpy as np
import plotly.graph_objects as go
from your_trueskill_code import log_joint_prior, logp_a_beats_b, draw_samples_hmc

st.title("TrueSkill Model: Bayesian Skill Inference")

# Interactive sliders for parameters
num_games = st.slider("Number of Games (A vs B)", 1, 10, 5)
stepsize = st.slider("MCMC Step Size", 0.001, 0.1, 0.01)
num_samples = st.slider("Number of Samples", 1000, 10000, 2500)

# Run MCMC sampling (cached for performance)
@st.cache
def run_mcmc(num_games, stepsize, num_samples):
    def log_posterior(zs):
        # Define posterior for A beating B in `num_games` matches
        return log_joint_prior(zs) + num_games * logp_a_beats_b(zs[0], zs[1])

    samples = draw_samples_hmc(
        num_params=2,
        stepsize=stepsize,
        num_leapfrog_steps=20,
        n_samples=num_samples,
        log_posterior=log_posterior
    )
    return samples.numpy()

samples = run_mcmc(num_games, stepsize, num_samples)

# Interactive scatter plot with Plotly
fig = go.Figure()
fig.add_trace(go.Scatter(
    x=samples[:, 0], y=samples[:, 1],
    mode='markers',
    marker=dict(opacity=0.3),
    name="Posterior Samples"
))
fig.add_shape(type="line", x0=-4, y0=-4, x1=4, y1=4, line=dict(dash="dash"))
fig.update_layout(
    title="Joint Posterior: Player A vs Player B",
    xaxis_title="Player A Skill",
    yaxis_title="Player B Skill"
)
st.plotly_chart(fig)

# Show code snippets (optional)
with st.expander("View Implementation"):
    st.code("""
    def log_posterior(zs):
        return log_joint_prior(zs) + num_games * logp_a_beats_b(zs[0], zs[1])
    samples = draw_samples_hmc(...)
    """, language="python")